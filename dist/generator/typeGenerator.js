"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTypeDefinitions = generateTypeDefinitions;
const fs_1 = require("fs");
const logger_1 = require("../utils/logger");
async function generateTypeDefinitions(schema) {
    try {
        (0, fs_1.mkdirSync)('./generated', { recursive: true });
        const typeDefinitions = generateModelTypes(schema.models);
        const indexFile = generateIndexFile(schema.models);
        (0, fs_1.writeFileSync)('./generated/types.ts', typeDefinitions);
        (0, fs_1.writeFileSync)('./generated/index.ts', indexFile);
        logger_1.logger.info('Generated type definitions in ./generated/types.ts');
    }
    catch (error) {
        logger_1.logger.error('Error generating type definitions:', error);
        throw error;
    }
}
function generateModelTypes(models) {
    return `// Generated by notion-orm
import { NotionPropertyTypes } from './notionTypes';

${models.map(model => `
export interface ${model.name} {
  id: string;
  ${model.fields.map(field => {
        const tsType = mapNotionTypeToTS(field.type);
        const optional = field.optional ? '?' : '';
        return `${field.name}${optional}: ${tsType};`;
    }).join('\n  ')}
  createdTime: string;
  lastEditedTime: string;
}

export interface ${model.name}Input {
  ${model.fields.map(field => {
        const tsType = mapNotionTypeToTS(field.type);
        const optional = field.optional ? '?' : '';
        return `${field.name}${optional}: ${tsType};`;
    }).join('\n  ')}
}
`).join('\n')}

export interface NotionProperty {
  id: string;
  type: NotionPropertyTypes;
  name: string;
}
`;
}
function generateIndexFile(models) {
    return `// Generated by notion-orm
export * from './types';
export * from './client';
`;
}
function mapNotionTypeToTS(notionType) {
    const typeMap = {
        'title': 'string',
        'rich_text': 'string',
        'number': 'number',
        'select': 'string',
        'multi_select': 'string[]',
        'date': 'string',
        'checkbox': 'boolean',
        'url': 'string',
        'email': 'string',
        'phone_number': 'string',
        'files': 'Array<{ name: string; url: string }>'
    };
    return typeMap[notionType] || 'any';
}
