import { writeFileSync, mkdirSync } from 'fs';
import { Schema, Model } from '../types';
import { logger } from '../utils/logger';

export async function generateTypeDefinitions(schema: Schema): Promise<void> {
  try {
    mkdirSync('./generated', { recursive: true });

    const typeDefinitions = generateModelTypes(schema.models);
    const indexFile = generateIndexFile(schema.models);

    writeFileSync('./generated/types.ts', typeDefinitions);
    writeFileSync('./generated/index.ts', indexFile);

    logger.info('Generated type definitions in ./generated/types.ts');
  } catch (error) {
    logger.error('Error generating type definitions:', error);
    throw error;
  }
}

function generateModelTypes(models: Model[]): string {
  return `// Generated by notion-orm
import { NotionPropertyTypes } from './notionTypes';

${models.map(model => `
export interface ${model.name} {
  id: string;
  ${model.fields.map(field => {
    const tsType = mapNotionTypeToTS(field.type);
    const optional = field.optional ? '?' : '';
    return `${field.name}${optional}: ${tsType};`;
  }).join('\n  ')}
  createdTime: string;
  lastEditedTime: string;
}

export interface ${model.name}Input {
  ${model.fields.map(field => {
    const tsType = mapNotionTypeToTS(field.type);
    const optional = field.optional ? '?' : '';
    return `${field.name}${optional}: ${tsType};`;
  }).join('\n  ')}
}
`).join('\n')}

export interface NotionProperty {
  id: string;
  type: NotionPropertyTypes;
  name: string;
}
`;
}

function generateIndexFile(models: Model[]): string {
  return `// Generated by notion-orm
export * from './types';
export * from './client';
`;
}

function mapNotionTypeToTS(notionType: string): string {
  const typeMap: Record<string, string> = {
    'title': 'string',
    'rich_text': 'string',
    'number': 'number',
    'select': 'string',
    'multi_select': 'string[]',
    'date': 'string',
    'checkbox': 'boolean',
    'url': 'string',
    'email': 'string',
    'phone_number': 'string',
    'files': 'Array<{ name: string; url: string }>'
  };

  return typeMap[notionType] || 'any';
}