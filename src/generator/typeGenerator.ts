import { writeFileSync, mkdirSync } from 'fs';
import { Schema, Model } from '../types';
import { logger } from '../utils/logger';

export async function generateTypeDefinitions(schema: Schema): Promise<void> {
  try {
    mkdirSync('./generated', { recursive: true });
    
    const typeDefinitions = generateModelTypes(schema.models);
    
    writeFileSync('./generated/models.ts', typeDefinitions);
  } catch (error) {
    logger.error('Error generating type definitions:', error);
    throw error;
  }
}

function generateModelTypes(models: Model[]): string {
  return `
// Generated by notion-orm
${models.map(model => `
export interface ${model.name} {
  ${model.fields.map(field => `
    ${field.name}${field.optional ? '?' : ''}: ${mapNotionTypeToTS(field.type)};
  `).join('\n')}
}
`).join('\n')}
`;
}

function mapNotionTypeToTS(notionType: string): string {
  const typeMap: Record<string, string> = {
    'title': 'string',
    'rich_text': 'string',
    'number': 'number',
    'select': 'string',
    'multi_select': 'string[]',
    'date': 'Date',
    'checkbox': 'boolean',
  };
  
  return typeMap[notionType] || 'any';
}
