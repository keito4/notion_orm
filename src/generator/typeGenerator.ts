import { writeFileSync, mkdirSync } from "fs";
import { resolve, dirname } from "path";
import { Model, Schema } from "../types";
import { logger } from "../utils/logger";
import { NotionClient } from "../notion/client";
import { NotionPropertyTypes } from "../types/notionTypes";

interface GeneratedModel {
  model: {
    name: string;
    notionDatabaseId: string;
  };
  database: {
    properties: Record<
      string,
      {
        type: NotionPropertyTypes;
        name: string;
      }
    >;
  };
}

export async function generateTypeDefinitions(schema: Schema): Promise<void> {
  try {
    const outputDir = schema.output?.directory || "./generated";
    const typeFile = schema.output?.typeDefinitionFile || "types.ts";
    const outputPath = resolve(outputDir, typeFile);

    mkdirSync(dirname(outputPath), { recursive: true });
    const typeDefinitions = generateModelTypes(schema.models);
    const indexFile = generateIndexFile(schema);

    writeFileSync(outputPath, typeDefinitions);
    writeFileSync(resolve(dirname(outputPath), "index.ts"), indexFile);

    logger.info(`Generated type definitions in ${outputPath}`);
  } catch (error) {
    logger.error("Error generating type definitions:", error);
    throw error;
  }
}

function generateModelTypes(models: Model[]): string {
  return `// Generated by notion-orm
import { NotionPropertyTypes } from '../types/notionTypes';

${models
  .map(
    (model) => `
export interface ${model.name} {
  id: string;
  ${model.fields
    .map((field) => {
      const typeStr = getPropertyType(field.type);
      const isOptional = field.optional;
      return `${sanitizePropertyName(field.name)}${
        isOptional ? "?" : ""
      }: ${typeStr};`;
    })
    .join("\n  ")}
  createdTime: string;
  lastEditedTime: string;
}

export interface ${model.name}Input {
  ${model.fields
    .map((field) => {
      const typeStr = getPropertyType(field.type);
      const isOptional = field.optional;
      return `${sanitizePropertyName(field.name)}${
        isOptional ? "?" : ""
      }: ${typeStr};`;
    })
    .join("\n  ")}
}
`
  )
  .join("\n")}`;
}

function generateIndexFile(schema: Schema): string {
  const typeFile = schema.output?.typeDefinitionFile || "types";
  const clientFile = schema.output?.clientFile || "client";
  return `// Generated by notion-orm
export * from './${typeFile.replace(/\.ts$/, "")}';
export * from './${clientFile.replace(/\.ts$/, "")}';
`;
}

function sanitizePropertyName(name: string): string {
  return name.match(/[^a-zA-Z0-9_$]/) ? `'${name}'` : name;
}

function getPropertyType(type: string): string {
  switch (type) {
    case "title":
    case "rich_text":
      return "string";
    case "number":
      return "number";
    case "select":
      return "string";
    case "multi_select":
      return "string[]";
    case "date":
      return "string | null";
    case "checkbox":
      return "boolean";
    case "people":
      return "Array<{ id: string; name: string; avatar_url?: string }>";
    case "relation":
      return "Array<{ id: string }>";
    case "formula":
      return "string";
    default:
      logger.warn(`Unsupported Notion property type: ${type}`);
      return "string";
  }
}
