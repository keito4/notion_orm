import { writeFileSync, mkdirSync } from "fs";
import { resolve, dirname } from "path";
import { Model, Schema } from "../types";
import { logger } from "../utils/logger";
import { generateModelTypes } from "./utils/typeUtils";

export async function generateTypeDefinitions(schema: Schema): Promise<void> {
  try {
    const outputDir = schema.output?.directory || "./generated";
    const typeFile = schema.output?.typeDefinitionFile || "types.ts";
    const outputPath = resolve(outputDir, typeFile);

    mkdirSync(dirname(outputPath), { recursive: true });
    const typeDefinitions = generateModelTypes(schema.models, schema, {
      includeImports: true,
      includeInputTypes: true,
      typeMode: "notion"
    });
    const indexFile = generateIndexFile(schema);

    writeFileSync(outputPath, typeDefinitions);
    writeFileSync(resolve(dirname(outputPath), "index.ts"), indexFile);

    logger.info(`Generated type definitions in ${outputPath}`);
  } catch (error) {
    logger.error("Error generating type definitions:", error);
    throw error;
  }
}


function generateIndexFile(schema: Schema): string {
  const typeFile = schema.output?.typeDefinitionFile || "types";
  const clientFile = schema.output?.clientFile || "client";
  return `// Generated by notion-orm
export * from './${typeFile.replace(/\.ts$/, "")}';
export * from './${clientFile.replace(/\.ts$/, "")}';
`;
}

